name: CI

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  version-check:
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Check version was updated
        run: |
          # Get current version from pyproject.toml
          CURRENT_VERSION=$(python -c "import tomllib; print(tomllib.load(open('pyproject.toml', 'rb'))['project']['version'])" 2>/dev/null || python -c "import toml; print(toml.load('pyproject.toml')['project']['version'])")

          # Get previous version from main branch
          git fetch origin main
          PREV_VERSION=$(git show origin/main:pyproject.toml | python -c "import sys, tomllib; print(tomllib.load(sys.stdin.buffer)['project']['version'])" 2>/dev/null || git show origin/main:pyproject.toml | python -c "import sys, toml; print(toml.load(sys.stdin)['project']['version'])")

          echo "Current version: $CURRENT_VERSION"
          echo "Previous version: $PREV_VERSION"

          if [ "$CURRENT_VERSION" = "$PREV_VERSION" ]; then
            echo "⚠️  Warning: Version not updated in pyproject.toml"
            echo "Please update version from $PREV_VERSION to a new version"
            exit 1
          else
            echo "✓ Version updated: $PREV_VERSION → $CURRENT_VERSION"
          fi

  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: [ "3.9", "3.10", "3.11" , "3.12", "3.13"]
    steps:
      - uses: actions/checkout@v3

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}

      - name: Install uv
        run: pip install uv

      - name: Install Dependencies
        run: uv sync --all-extras

      - name: Run tests with coverage
        run: uv run pytest --cov=pysuricata --cov-report=xml --cov-report=term-missing

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v5
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          flags: unittests
          name: codecov-umbrella
          fail_ci_if_error: false

  docs:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Set up UV
        uses: astral-sh/setup-uv@v3

      - name: Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.12"

      - name: Install dependencies
        run: |
          uv sync --dev

      - name: Build docs
        run: uv run mkdocs build --strict
