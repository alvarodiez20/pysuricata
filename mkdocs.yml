site_name: PySuricata
site_description: Exploratory data analysis reports for pandas DataFrames
site_url: https://alvarodiez20.github.io/pysuricata/
repo_name: alvarodiez20/pysuricata
repo_url: https://github.com/alvarodiez20/pysuricata
edit_uri: blob/main/docs/

theme:
  name: material
  features:
    - navigation.sections
    - navigation.tracking
    - navigation.top
    - toc.integrate
    - content.code.copy
    - content.tabs.link
  palette:
    - scheme: default
      primary: indigo
      accent: indigo
  icon:
    repo: fontawesome/brands/github

nav:
  - Home: index.md
  - Getting started:
      - Installation: install.md
      - Usage: usage.md
      - API: api.md
      - Numerical Analysis: numeric_var.md
  - Internals: architecture.md
  - Sequence Diagrams:
      - Pandas Workflow: sequence_diagram_pandas.md
      - Polars Workflow: sequence_diagram_polars.md

markdown_extensions:
  - admonition
  - attr_list
  - footnotes
  - md_in_html
  - pymdownx.details
  - pymdownx.highlight
  - pymdownx.inlinehilite
  - pymdownx.superfences
  - pymdownx.tabbed:
      alternate_style: true
  - pymdownx.arithmatex:
      generic: true
  - pymdownx.superfences:
      custom_fences:
        - name: mermaid
          class: mermaid
          format: !!python/name:pymdownx.superfences.fence_code_format

plugins:
  - search
  - mkdocstrings:
      handlers:
        python:
          options:
            docstring_style: google
            show_source: true
            show_root_heading: true
            heading_level: 2
  # uncomment if you installed them:
  # - git-revision-date-localized:
  #     enable_creation_date: true
  # - minify:
  #     minify_html: true

extra:
  social:
    - icon: fontawesome/brands/github
      link: https://github.com/alvarodiez20

extra_css:
  # Custom CSS for Mermaid zoom functionality
  - |
    /* Mermaid Zoom and Fullscreen Styles */
    .mermaid-container {
        position: relative;
        display: inline-block;
        width: 100%;
        text-align: center;
        margin: 20px 0;
    }

    .mermaid-controls {
        position: absolute;
        top: 10px;
        right: 10px;
        z-index: 1000;
        display: flex;
        gap: 5px;
        opacity: 0.8;
        transition: opacity 0.3s ease;
    }

    .mermaid-container:hover .mermaid-controls {
        opacity: 1;
    }

    .mermaid-control-btn {
        background: rgba(52, 152, 219, 0.9);
        color: white;
        border: none;
        border-radius: 4px;
        width: 32px;
        height: 32px;
        cursor: pointer;
        font-size: 14px;
        display: flex;
        align-items: center;
        justify-content: center;
        transition: all 0.2s ease;
        box-shadow: 0 2px 4px rgba(0, 0, 0, 0.2);
    }

    .mermaid-control-btn:hover {
        background: rgba(41, 128, 185, 1);
        transform: scale(1.1);
        box-shadow: 0 4px 8px rgba(0, 0, 0, 0.3);
    }

    .mermaid-control-btn:active {
        transform: scale(0.95);
    }

    .mermaid {
        cursor: zoom-in;
        transition: transform 0.3s ease;
        border-radius: 8px;
        overflow: hidden;
        box-shadow: 0 2px 8px rgba(0, 0, 0, 0.1);
    }

    .mermaid:hover {
        box-shadow: 0 4px 16px rgba(0, 0, 0, 0.15);
    }

    /* Fullscreen Modal Styles */
    .mermaid-fullscreen-modal {
        position: fixed;
        top: 0;
        left: 0;
        width: 100%;
        height: 100%;
        background-color: rgba(0, 0, 0, 0.9);
        z-index: 10000;
        display: flex;
        align-items: center;
        justify-content: center;
        cursor: zoom-out;
        animation: fadeIn 0.3s ease;
    }

    @keyframes fadeIn {
        from { opacity: 0; }
        to { opacity: 1; }
    }

    .mermaid-fullscreen-content {
        position: relative;
        max-width: 95%;
        max-height: 95%;
        overflow: auto;
        background-color: white;
        padding: 20px;
        border-radius: 8px;
        box-shadow: 0 4px 20px rgba(0, 0, 0, 0.5);
        animation: slideIn 0.3s ease;
    }

    @keyframes slideIn {
        from { 
            opacity: 0;
            transform: scale(0.9) translateY(-20px);
        }
        to { 
            opacity: 1;
            transform: scale(1) translateY(0);
        }
    }

    .mermaid-fullscreen-content .mermaid {
        cursor: default;
        box-shadow: none;
    }

    .mermaid-fullscreen-content .mermaid:hover {
        box-shadow: none;
    }

    /* Close button in fullscreen */
    .mermaid-fullscreen-content button[title="Close (ESC)"] {
        position: absolute;
        top: 10px;
        right: 10px;
        background: #ff4444;
        color: white;
        border: none;
        border-radius: 50%;
        width: 30px;
        height: 30px;
        cursor: pointer;
        font-size: 16px;
        z-index: 10001;
        display: flex;
        align-items: center;
        justify-content: center;
        transition: all 0.2s ease;
    }

    .mermaid-fullscreen-content button[title="Close (ESC)"]:hover {
        background: #cc0000;
        transform: scale(1.1);
    }

    /* Zoom controls in fullscreen */
    .mermaid-fullscreen-content .mermaid-controls {
        position: absolute;
        top: 10px;
        left: 10px;
        z-index: 10001;
    }

    /* Responsive design */
    @media (max-width: 768px) {
        .mermaid-controls {
            top: 5px;
            right: 5px;
            gap: 3px;
        }
        
        .mermaid-control-btn {
            width: 28px;
            height: 28px;
            font-size: 12px;
        }
        
        .mermaid-fullscreen-content {
            max-width: 98%;
            max-height: 98%;
            padding: 15px;
        }
    }

    /* Dark mode support */
    @media (prefers-color-scheme: dark) {
        .mermaid-control-btn {
            background: rgba(52, 152, 219, 0.9);
            color: white;
        }
        
        .mermaid-control-btn:hover {
            background: rgba(41, 128, 185, 1);
        }
        
        .mermaid-fullscreen-content {
            background-color: #2d3748;
            color: white;
        }
    }

extra_javascript:
  - https://polyfill.io/v3/polyfill.min.js?features=es6
  - https://unpkg.com/mathjax@3/es5/tex-mml-chtml.js
  - https://cdn.jsdelivr.net/npm/mermaid/dist/mermaid.min.js
  
  # Custom JavaScript for Mermaid zoom functionality
  - |
    // Initialize Mermaid when the page loads
    document.addEventListener('DOMContentLoaded', function() {
        // Initialize Mermaid with configuration
        mermaid.initialize({
            startOnLoad: true,
            theme: 'default',
            themeVariables: {
                primaryColor: '#3498db',
                primaryTextColor: '#2c3e50',
                primaryBorderColor: '#2980b9',
                lineColor: '#34495e',
                secondaryColor: '#ecf0f1',
                tertiaryColor: '#ffffff'
            },
            sequence: {
                diagramMarginX: 50,
                diagramMarginY: 10,
                actorMargin: 50,
                width: 150,
                height: 65,
                boxMargin: 10,
                boxTextMargin: 5,
                noteMargin: 10,
                messageMargin: 35,
                messageAlign: 'center',
                mirrorActors: true,
                bottomMarginAdj: 1,
                useMaxWidth: true,
                rightAngles: false,
                showSequenceNumbers: false
            }
        });

        // Add zoom and fullscreen functionality after Mermaid renders
        setTimeout(addZoomAndFullscreenFeatures, 1000);
    });

    function addZoomAndFullscreenFeatures() {
        // Find all Mermaid diagrams
        const mermaidDiagrams = document.querySelectorAll('.mermaid');
        
        mermaidDiagrams.forEach((diagram, index) => {
            // Create container for the diagram with controls
            const container = document.createElement('div');
            container.className = 'mermaid-container';
            container.style.position = 'relative';
            container.style.display = 'inline-block';
            container.style.width = '100%';
            container.style.textAlign = 'center';
            
            // Wrap the diagram in the container
            diagram.parentNode.insertBefore(container, diagram);
            container.appendChild(diagram);
            
            // Create control buttons
            const controls = document.createElement('div');
            controls.className = 'mermaid-controls';
            controls.style.position = 'absolute';
            controls.style.top = '10px';
            controls.style.right = '10px';
            controls.style.zIndex = '1000';
            controls.style.display = 'flex';
            controls.style.gap = '5px';
            
            // Zoom in button
            const zoomInBtn = document.createElement('button');
            zoomInBtn.innerHTML = '🔍+';
            zoomInBtn.title = 'Zoom In';
            zoomInBtn.className = 'mermaid-control-btn';
            zoomInBtn.onclick = () => zoomDiagram(diagram, 1.2);
            
            // Zoom out button
            const zoomOutBtn = document.createElement('button');
            zoomOutBtn.innerHTML = '🔍-';
            zoomOutBtn.title = 'Zoom Out';
            zoomOutBtn.className = 'mermaid-control-btn';
            zoomOutBtn.onclick = () => zoomDiagram(diagram, 0.8);
            
            // Reset zoom button
            const resetBtn = document.createElement('button');
            resetBtn.innerHTML = '↺';
            resetBtn.title = 'Reset Zoom';
            resetBtn.className = 'mermaid-control-btn';
            resetBtn.onclick = () => resetZoom(diagram);
            
            // Fullscreen button
            const fullscreenBtn = document.createElement('button');
            fullscreenBtn.innerHTML = '⛶';
            fullscreenBtn.title = 'Fullscreen';
            fullscreenBtn.className = 'mermaid-control-btn';
            fullscreenBtn.onclick = () => openFullscreen(diagram);
            
            controls.appendChild(zoomInBtn);
            controls.appendChild(zoomOutBtn);
            controls.appendChild(resetBtn);
            controls.appendChild(fullscreenBtn);
            
            container.appendChild(controls);
            
            // Add click-to-zoom functionality
            diagram.style.cursor = 'zoom-in';
            diagram.onclick = () => openFullscreen(diagram);
        });
    }

    function zoomDiagram(diagram, factor) {
        const currentTransform = diagram.style.transform || 'scale(1)';
        const currentScale = parseFloat(currentTransform.match(/scale\(([^)]+)\)/)?.[1] || '1');
        const newScale = Math.max(0.5, Math.min(3, currentScale * factor));
        diagram.style.transform = `scale(${newScale})`;
        diagram.style.transformOrigin = 'center';
        diagram.style.transition = 'transform 0.3s ease';
    }

    function resetZoom(diagram) {
        diagram.style.transform = 'scale(1)';
        diagram.style.transition = 'transform 0.3s ease';
    }

    function openFullscreen(diagram) {
        // Create modal overlay
        const modal = document.createElement('div');
        modal.className = 'mermaid-fullscreen-modal';
        modal.style.position = 'fixed';
        modal.style.top = '0';
        modal.style.left = '0';
        modal.style.width = '100%';
        modal.style.height = '100%';
        modal.style.backgroundColor = 'rgba(0, 0, 0, 0.9)';
        modal.style.zIndex = '10000';
        modal.style.display = 'flex';
        modal.style.alignItems = 'center';
        modal.style.justifyContent = 'center';
        modal.style.cursor = 'zoom-out';
        
        // Create modal content
        const modalContent = document.createElement('div');
        modalContent.className = 'mermaid-fullscreen-content';
        modalContent.style.position = 'relative';
        modalContent.style.maxWidth = '95%';
        modalContent.style.maxHeight = '95%';
        modalContent.style.overflow = 'auto';
        modalContent.style.backgroundColor = 'white';
        modalContent.style.padding = '20px';
        modalContent.style.borderRadius = '8px';
        modalContent.style.boxShadow = '0 4px 20px rgba(0, 0, 0, 0.5)';
        
        // Clone the diagram for the modal
        const clonedDiagram = diagram.cloneNode(true);
        clonedDiagram.style.transform = 'scale(1)';
        clonedDiagram.style.width = '100%';
        clonedDiagram.style.height = 'auto';
        clonedDiagram.style.cursor = 'default';
        
        // Remove click handler from cloned diagram
        clonedDiagram.onclick = null;
        
        // Create close button
        const closeBtn = document.createElement('button');
        closeBtn.innerHTML = '✕';
        closeBtn.title = 'Close (ESC)';
        closeBtn.style.position = 'absolute';
        closeBtn.style.top = '10px';
        closeBtn.style.right = '10px';
        closeBtn.style.background = '#ff4444';
        closeBtn.style.color = 'white';
        closeBtn.style.border = 'none';
        closeBtn.style.borderRadius = '50%';
        closeBtn.style.width = '30px';
        closeBtn.style.height = '30px';
        closeBtn.style.cursor = 'pointer';
        closeBtn.style.fontSize = '16px';
        closeBtn.style.zIndex = '10001';
        
        // Add zoom controls to modal
        const modalControls = document.createElement('div');
        modalControls.style.position = 'absolute';
        modalControls.style.top = '10px';
        modalControls.style.left = '10px';
        modalControls.style.display = 'flex';
        modalControls.style.gap = '5px';
        modalControls.style.zIndex = '10001';
        
        const modalZoomIn = document.createElement('button');
        modalZoomIn.innerHTML = '🔍+';
        modalZoomIn.title = 'Zoom In';
        modalZoomIn.className = 'mermaid-control-btn';
        modalZoomIn.onclick = () => zoomDiagram(clonedDiagram, 1.2);
        
        const modalZoomOut = document.createElement('button');
        modalZoomOut.innerHTML = '🔍-';
        modalZoomOut.title = 'Zoom Out';
        modalZoomOut.className = 'mermaid-control-btn';
        modalZoomOut.onclick = () => zoomDiagram(clonedDiagram, 0.8);
        
        const modalReset = document.createElement('button');
        modalReset.innerHTML = '↺';
        modalReset.title = 'Reset Zoom';
        modalReset.className = 'mermaid-control-btn';
        modalReset.onclick = () => resetZoom(clonedDiagram);
        
        modalControls.appendChild(modalZoomIn);
        modalControls.appendChild(modalZoomOut);
        modalControls.appendChild(modalReset);
        
        modalContent.appendChild(clonedDiagram);
        modalContent.appendChild(closeBtn);
        modalContent.appendChild(modalControls);
        modal.appendChild(modalContent);
        
        // Add to document
        document.body.appendChild(modal);
        
        // Close modal functions
        const closeModal = () => {
            document.body.removeChild(modal);
        };
        
        closeBtn.onclick = closeModal;
        modal.onclick = (e) => {
            if (e.target === modal) closeModal();
        };
        
        // Close on ESC key
        const handleKeyPress = (e) => {
            if (e.key === 'Escape') {
                closeModal();
                document.removeEventListener('keydown', handleKeyPress);
            }
        };
        document.addEventListener('keydown', handleKeyPress);
    }
